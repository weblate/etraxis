security:

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            migrate_from:
                - legacy.md5
                - legacy.sha1
        legacy.md5:
            id: App\Security\PasswordHasher\Md5PasswordHasher
        legacy.sha1:
            id: App\Security\PasswordHasher\Sha1PasswordHasher

    providers:
        etraxis:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_doc:
            pattern: ^/api/(doc|doc\.json)$
            security: false
        main:
            lazy: true
            logout: true
            login_throttling: true
            provider: etraxis
            user_checker: App\Security\UserChecker
            entry_point: App\Security\AuthenticationEntryPoint
            custom_authenticators:
                - App\Security\Authenticator\JwtAuthenticator
                - App\Security\Authenticator\LdapAuthenticator
                - App\Security\Authenticator\PasswordAuthenticator
            switch_user: { role: ROLE_ADMIN }
            remember_me:
                secret: '%kernel.secret%'

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login,  roles: PUBLIC_ACCESS }
        - { path: ^/api/forgot, roles: PUBLIC_ACCESS }
        - { path: ^/api/reset,  roles: PUBLIC_ACCESS }

        - { path: ^/login,  roles: PUBLIC_ACCESS }
        - { path: ^/forgot, roles: PUBLIC_ACCESS }
        - { path: ^/reset,  roles: PUBLIC_ACCESS }

        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/,      roles: ROLE_USER  }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
